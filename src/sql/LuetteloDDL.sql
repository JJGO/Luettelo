CREATE DATABASE IF NOT EXISTS LUETTELO;
USE LUETTELO;

CREATE TABLE IF NOT EXISTS USERS
(
    USERNAME    VARCHAR(31)     NOT NULL,
    EMAIL       VARCHAR(254)    NOT NULL,
    PASSWORD    CHAR(60)        NOT NULL,
    PRIMARY KEY(USERNAME)
);

CREATE TABLE IF NOT EXISTS LISTS
(
    ID          INT UNSIGNED    NOT NULL    AUTO_INCREMENT,
    NAME        VARCHAR(255)    NOT NULL,
    CATEGORY    VARCHAR(31)     NOT NULL,
    DESCRIPTION TEXT,

    USER        VARCHAR(31)     NOT NULL,

    PRIMARY KEY(ID),
    FOREIGN KEY(USER) REFERENCES USERS(USERNAME) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS ITEMS
(
    ID          INT UNSIGNED    NOT NULL    AUTO_INCREMENT,
    NAME        VARCHAR(255)    NOT NULL,
    URL         VARCHAR(2083),

    LIST        INT UNSIGNED    NOT NULL,

    PRIMARY KEY(ID),
    FOREIGN KEY(LIST) REFERENCES LISTS(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS COMMENTS
(
    ID          INT UNSIGNED    NOT NULL    AUTO_INCREMENT,
    USER        VARCHAR(31)     NOT NULL,
    CONTENT     TEXT            NOT NULL,
    LIST        INT UNSIGNED    NOT NULL,

    PRIMARY KEY(ID),
    FOREIGN KEY(USER) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY(LIST) REFERENCES LISTS(ID) ON DELETE CASCADE

);

CREATE TABLE IF NOT EXISTS SUBSCRIPTIONS
(
    USER        VARCHAR(31)     NOT NULL,
    LIST        INT UNSIGNED    NOT NULL,

    PRIMARY KEY(USER,LIST),
    FOREIGN KEY(USER) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY(LIST) REFERENCES LISTS(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS RATINGS
(
    VALUE       TINYINT         DEFAULT 0,
    USER        VARCHAR(31)     NOT NULL,
    ITEM        INT UNSIGNED    NOT NULL,

    PRIMARY KEY(USER,ITEM),
    FOREIGN KEY(USER) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY(ITEM) REFERENCES ITEMS(ID) ON DELETE CASCADE

);


-- CREATE TABLE IF NOT EXISTS VOTES
-- (
--     VALUE       TINYINT(1)      DEFAULT NULL,
--     USER        VARCHAR(31)     NOT NULL,
--     COMMENT     INT UNSIGNED    NOT NULL,

--     PRIMARY KEY(USER,COMMENT),
--     FOREIGN KEY(USER) REFERENCES USERS(USERNAME) ON DELETE CASCADE,
--     FOREIGN KEY(COMMENT) REFERENCES COMMENTS(ID) ON DELETE CASCADE

-- );

CREATE VIEW ITEMS_AVG AS
SELECT  ID,
        LIST,
        ROUND(20*AVG(NULLIF(R.VALUE,0))) AS AVERAGE
FROM ITEMS I
     INNER JOIN RATINGS R
        ON I.ID = R.ITEM
GROUP BY I.ID;

CREATE VIEW LISTS_AVG AS
SELECT  LIST AS ID,
        ROUND(AVG(AVERAGE)) AS AVERAGE
FROM ITEMS_AVG
GROUP BY LIST;
